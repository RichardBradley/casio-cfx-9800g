/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.bradders.casiocfx9800g.analysis;

import java.util.*;
import org.bradders.casiocfx9800g.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inASingleProgram(ASingleProgram node)
    {
        defaultIn(node);
    }

    public void outASingleProgram(ASingleProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleProgram(ASingleProgram node)
    {
        inASingleProgram(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outASingleProgram(node);
    }

    public void inASequenceProgram(ASequenceProgram node)
    {
        defaultIn(node);
    }

    public void outASequenceProgram(ASequenceProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceProgram(ASequenceProgram node)
    {
        inASequenceProgram(node);
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outASequenceProgram(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getQuotedText() != null)
        {
            node.getQuotedText().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getPrintResult() != null)
        {
            node.getPrintResult().apply(this);
        }
        if(node.getVariableName() != null)
        {
            node.getVariableName().apply(this);
        }
        if(node.getAssignArrow() != null)
        {
            node.getAssignArrow().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAFuncStatement(AFuncStatement node)
    {
        defaultIn(node);
    }

    public void outAFuncStatement(AFuncStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncStatement(AFuncStatement node)
    {
        inAFuncStatement(node);
        if(node.getPrintResult() != null)
        {
            node.getPrintResult().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getFunctionName() != null)
        {
            node.getFunctionName().apply(this);
        }
        outAFuncStatement(node);
    }

    public void inALabelStatement(ALabelStatement node)
    {
        defaultIn(node);
    }

    public void outALabelStatement(ALabelStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelStatement(ALabelStatement node)
    {
        inALabelStatement(node);
        if(node.getDigit() != null)
        {
            node.getDigit().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outALabelStatement(node);
    }

    public void inAGotoStatement(AGotoStatement node)
    {
        defaultIn(node);
    }

    public void outAGotoStatement(AGotoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoStatement(AGotoStatement node)
    {
        inAGotoStatement(node);
        if(node.getDigit() != null)
        {
            node.getDigit().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        outAGotoStatement(node);
    }

    public void inATermExpression(ATermExpression node)
    {
        defaultIn(node);
    }

    public void outATermExpression(ATermExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpression(ATermExpression node)
    {
        inATermExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpression(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAPlusExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADivTerm(node);
    }

    public void inAMultadjTerm(AMultadjTerm node)
    {
        defaultIn(node);
    }

    public void outAMultadjTerm(AMultadjTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultadjTerm(AMultadjTerm node)
    {
        inAMultadjTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultadjTerm(node);
    }

    public void inAAtomFactor(AAtomFactor node)
    {
        defaultIn(node);
    }

    public void outAAtomFactor(AAtomFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtomFactor(AAtomFactor node)
    {
        inAAtomFactor(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAAtomFactor(node);
    }

    public void inAPowerFactor(APowerFactor node)
    {
        defaultIn(node);
    }

    public void outAPowerFactor(APowerFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPowerFactor(APowerFactor node)
    {
        inAPowerFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPow() != null)
        {
            node.getPow().apply(this);
        }
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAPowerFactor(node);
    }

    public void inAVarAtom(AVarAtom node)
    {
        defaultIn(node);
    }

    public void outAVarAtom(AVarAtom node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAtom(AVarAtom node)
    {
        inAVarAtom(node);
        if(node.getVariableName() != null)
        {
            node.getVariableName().apply(this);
        }
        outAVarAtom(node);
    }

    public void inANumberAtom(ANumberAtom node)
    {
        defaultIn(node);
    }

    public void outANumberAtom(ANumberAtom node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberAtom(ANumberAtom node)
    {
        inANumberAtom(node);
        if(node.getNumberLiteral() != null)
        {
            node.getNumberLiteral().apply(this);
        }
        outANumberAtom(node);
    }

    public void inAExpressionAtom(AExpressionAtom node)
    {
        defaultIn(node);
    }

    public void outAExpressionAtom(AExpressionAtom node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionAtom(AExpressionAtom node)
    {
        inAExpressionAtom(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outAExpressionAtom(node);
    }

    public void inASingleArgumentList(ASingleArgumentList node)
    {
        defaultIn(node);
    }

    public void outASingleArgumentList(ASingleArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleArgumentList(ASingleArgumentList node)
    {
        inASingleArgumentList(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outASingleArgumentList(node);
    }

    public void inASequenceArgumentList(ASequenceArgumentList node)
    {
        defaultIn(node);
    }

    public void outASequenceArgumentList(ASequenceArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceArgumentList(ASequenceArgumentList node)
    {
        inASequenceArgumentList(node);
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outASequenceArgumentList(node);
    }
}
