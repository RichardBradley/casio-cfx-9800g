/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.bradders.casiocfx9800g.analysis;

import java.util.*;
import org.bradders.casiocfx9800g.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleProgram(ASingleProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASequenceProgram(ASequenceProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommentStatement(ACommentStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrinttextStatement(APrinttextStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintvalStatement(APrintvalStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabelStatement(ALabelStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGotoStatement(AGotoStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubNoargsStatement(ASubNoargsStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubArgsStatement(ASubArgsStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACountJumpStatement(ACountJumpStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubStatement(ASubStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGraphStatement(AGraphStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleExpression(ASingleExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpression(APlusExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpression(AMinusExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleMultdiv(ASingleMultdiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultMultdiv(AMultMultdiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivMultdiv(ADivMultdiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinglePrefixop(ASinglePrefixop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegatePrefixop(ANegatePrefixop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleFunc(ASingleFunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunc1Func(AFunc1Func node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunc2Func(AFunc2Func node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncNoArgsFunc(AFuncNoArgsFunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleMultgroup(ASingleMultgroup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultMultgroup(AMultMultgroup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleFrac(ASingleFrac node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPairFrac(APairFrac node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATripleFrac(ATripleFrac node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinglePow(ASinglePow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPowerPow(APowerPow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinglePostfixop(ASinglePostfixop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorialPostfixop(AFactorialPostfixop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarAtom(AVarAtom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberAtom(ANumberAtom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInputAtom(AInputAtom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionAtom(AExpressionAtom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleExpressionList(ASingleExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASequenceExpressionList(ASequenceExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleAtomList(ASingleAtomList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASequenceAtomList(ASequenceAtomList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStatementSeparator(TStatementSeparator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQuotedText(TQuotedText node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVariableName(TVariableName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberLiteral(TNumberLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFractionSep(TFractionSep node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrintResult(TPrintResult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssignArrow(TAssignArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThenArrow(TThenArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunctionName(TFunctionName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunctionNoargsName(TFunctionNoargsName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubNoargsName(TSubNoargsName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubArgsName(TSubArgsName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComparisonOp(TComparisonOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPow(TPow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLabel(TLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInputPrompt(TInputPrompt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBang(TBang node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCountJumpOp(TCountJumpOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProg(TProg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGraph(TGraph node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
