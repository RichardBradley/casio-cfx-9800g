/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.bradders.casiocfx9800g.node;

import org.bradders.casiocfx9800g.analysis.*;

@SuppressWarnings("nls")
public final class APowerFactor extends PFactor
{
    private PAtom _atom_;
    private TPow _pow_;
    private PFactor _factor_;

    public APowerFactor()
    {
        // Constructor
    }

    public APowerFactor(
        @SuppressWarnings("hiding") PAtom _atom_,
        @SuppressWarnings("hiding") TPow _pow_,
        @SuppressWarnings("hiding") PFactor _factor_)
    {
        // Constructor
        setAtom(_atom_);

        setPow(_pow_);

        setFactor(_factor_);

    }

    @Override
    public Object clone()
    {
        return new APowerFactor(
            cloneNode(this._atom_),
            cloneNode(this._pow_),
            cloneNode(this._factor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPowerFactor(this);
    }

    public PAtom getAtom()
    {
        return this._atom_;
    }

    public void setAtom(PAtom node)
    {
        if(this._atom_ != null)
        {
            this._atom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atom_ = node;
    }

    public TPow getPow()
    {
        return this._pow_;
    }

    public void setPow(TPow node)
    {
        if(this._pow_ != null)
        {
            this._pow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pow_ = node;
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._atom_)
            + toString(this._pow_)
            + toString(this._factor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._atom_ == child)
        {
            this._atom_ = null;
            return;
        }

        if(this._pow_ == child)
        {
            this._pow_ = null;
            return;
        }

        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._atom_ == oldChild)
        {
            setAtom((PAtom) newChild);
            return;
        }

        if(this._pow_ == oldChild)
        {
            setPow((TPow) newChild);
            return;
        }

        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
