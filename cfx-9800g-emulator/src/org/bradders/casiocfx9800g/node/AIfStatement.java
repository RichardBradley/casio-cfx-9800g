/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.bradders.casiocfx9800g.node;

import org.bradders.casiocfx9800g.analysis.*;

@SuppressWarnings("nls")
public final class AIfStatement extends PStatement
{
    private PExpression _left_;
    private TComparisonOp _comparisonOp_;
    private PExpression _right_;
    private TThenArrow _thenArrow_;
    private PStatement _statement_;

    public AIfStatement()
    {
        // Constructor
    }

    public AIfStatement(
        @SuppressWarnings("hiding") PExpression _left_,
        @SuppressWarnings("hiding") TComparisonOp _comparisonOp_,
        @SuppressWarnings("hiding") PExpression _right_,
        @SuppressWarnings("hiding") TThenArrow _thenArrow_,
        @SuppressWarnings("hiding") PStatement _statement_)
    {
        // Constructor
        setLeft(_left_);

        setComparisonOp(_comparisonOp_);

        setRight(_right_);

        setThenArrow(_thenArrow_);

        setStatement(_statement_);

    }

    @Override
    public Object clone()
    {
        return new AIfStatement(
            cloneNode(this._left_),
            cloneNode(this._comparisonOp_),
            cloneNode(this._right_),
            cloneNode(this._thenArrow_),
            cloneNode(this._statement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStatement(this);
    }

    public PExpression getLeft()
    {
        return this._left_;
    }

    public void setLeft(PExpression node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TComparisonOp getComparisonOp()
    {
        return this._comparisonOp_;
    }

    public void setComparisonOp(TComparisonOp node)
    {
        if(this._comparisonOp_ != null)
        {
            this._comparisonOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparisonOp_ = node;
    }

    public PExpression getRight()
    {
        return this._right_;
    }

    public void setRight(PExpression node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    public TThenArrow getThenArrow()
    {
        return this._thenArrow_;
    }

    public void setThenArrow(TThenArrow node)
    {
        if(this._thenArrow_ != null)
        {
            this._thenArrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenArrow_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._comparisonOp_)
            + toString(this._right_)
            + toString(this._thenArrow_)
            + toString(this._statement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._comparisonOp_ == child)
        {
            this._comparisonOp_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        if(this._thenArrow_ == child)
        {
            this._thenArrow_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((PExpression) newChild);
            return;
        }

        if(this._comparisonOp_ == oldChild)
        {
            setComparisonOp((TComparisonOp) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PExpression) newChild);
            return;
        }

        if(this._thenArrow_ == oldChild)
        {
            setThenArrow((TThenArrow) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
