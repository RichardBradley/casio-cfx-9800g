/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.bradders.casiocfx9800g.node;

import org.bradders.casiocfx9800g.analysis.*;

@SuppressWarnings("nls")
public final class AGraphStatement extends PStatement
{
    private TGraph _graph_;
    private TSpace _space_;
    private TVariableName _variableName_;
    private TComparisonOp _comparisonOp_;
    private PExpression _expression_;

    public AGraphStatement()
    {
        // Constructor
    }

    public AGraphStatement(
        @SuppressWarnings("hiding") TGraph _graph_,
        @SuppressWarnings("hiding") TSpace _space_,
        @SuppressWarnings("hiding") TVariableName _variableName_,
        @SuppressWarnings("hiding") TComparisonOp _comparisonOp_,
        @SuppressWarnings("hiding") PExpression _expression_)
    {
        // Constructor
        setGraph(_graph_);

        setSpace(_space_);

        setVariableName(_variableName_);

        setComparisonOp(_comparisonOp_);

        setExpression(_expression_);

    }

    @Override
    public Object clone()
    {
        return new AGraphStatement(
            cloneNode(this._graph_),
            cloneNode(this._space_),
            cloneNode(this._variableName_),
            cloneNode(this._comparisonOp_),
            cloneNode(this._expression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGraphStatement(this);
    }

    public TGraph getGraph()
    {
        return this._graph_;
    }

    public void setGraph(TGraph node)
    {
        if(this._graph_ != null)
        {
            this._graph_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._graph_ = node;
    }

    public TSpace getSpace()
    {
        return this._space_;
    }

    public void setSpace(TSpace node)
    {
        if(this._space_ != null)
        {
            this._space_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._space_ = node;
    }

    public TVariableName getVariableName()
    {
        return this._variableName_;
    }

    public void setVariableName(TVariableName node)
    {
        if(this._variableName_ != null)
        {
            this._variableName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableName_ = node;
    }

    public TComparisonOp getComparisonOp()
    {
        return this._comparisonOp_;
    }

    public void setComparisonOp(TComparisonOp node)
    {
        if(this._comparisonOp_ != null)
        {
            this._comparisonOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparisonOp_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._graph_)
            + toString(this._space_)
            + toString(this._variableName_)
            + toString(this._comparisonOp_)
            + toString(this._expression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._graph_ == child)
        {
            this._graph_ = null;
            return;
        }

        if(this._space_ == child)
        {
            this._space_ = null;
            return;
        }

        if(this._variableName_ == child)
        {
            this._variableName_ = null;
            return;
        }

        if(this._comparisonOp_ == child)
        {
            this._comparisonOp_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._graph_ == oldChild)
        {
            setGraph((TGraph) newChild);
            return;
        }

        if(this._space_ == oldChild)
        {
            setSpace((TSpace) newChild);
            return;
        }

        if(this._variableName_ == oldChild)
        {
            setVariableName((TVariableName) newChild);
            return;
        }

        if(this._comparisonOp_ == oldChild)
        {
            setComparisonOp((TComparisonOp) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
