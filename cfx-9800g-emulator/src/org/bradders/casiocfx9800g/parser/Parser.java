/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.bradders.casiocfx9800g.parser;

import org.bradders.casiocfx9800g.lexer.*;
import org.bradders.casiocfx9800g.node.*;
import org.bradders.casiocfx9800g.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAsingleprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAsingleprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ASequenceProgram */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce APrinttextStatement */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAassignstatement1Statement */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAassignstatement2Statement */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AAassignstatement3Statement */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AAassignstatement4Statement */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce AAprintvalstatement1Statement */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AAprintvalstatement2Statement */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce ALabelStatement */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce AGotoStatement */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list, false);
            }
            break;
            case 12: /* reduce ASubNoargsStatement */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list, false);
            }
            break;
            case 13: /* reduce ASubArgsStatement */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list, false);
            }
            break;
            case 14: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new14();
                push(goTo(1), list, false);
            }
            break;
            case 15: /* reduce ACountJumpStatement */
            {
                ArrayList<Object> list = new15();
                push(goTo(1), list, false);
            }
            break;
            case 16: /* reduce ATermExpression */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list, false);
            }
            break;
            case 17: /* reduce APlusExpression */
            {
                ArrayList<Object> list = new17();
                push(goTo(2), list, false);
            }
            break;
            case 18: /* reduce AMinusExpression */
            {
                ArrayList<Object> list = new18();
                push(goTo(2), list, false);
            }
            break;
            case 19: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new19();
                push(goTo(3), list, false);
            }
            break;
            case 20: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new20();
                push(goTo(3), list, false);
            }
            break;
            case 21: /* reduce ADivTerm */
            {
                ArrayList<Object> list = new21();
                push(goTo(3), list, false);
            }
            break;
            case 22: /* reduce ASingleFactor */
            {
                ArrayList<Object> list = new22();
                push(goTo(4), list, false);
            }
            break;
            case 23: /* reduce AMultgroupFactor */
            {
                ArrayList<Object> list = new23();
                push(goTo(4), list, false);
            }
            break;
            case 24: /* reduce ANegateFactor */
            {
                ArrayList<Object> list = new24();
                push(goTo(4), list, false);
            }
            break;
            case 25: /* reduce APostfixopMultgroup */
            {
                ArrayList<Object> list = new25();
                push(goTo(5), list, false);
            }
            break;
            case 26: /* reduce APowerMultgroup */
            {
                ArrayList<Object> list = new26();
                push(goTo(5), list, false);
            }
            break;
            case 27: /* reduce AFuncPostfixop */
            {
                ArrayList<Object> list = new27();
                push(goTo(6), list, false);
            }
            break;
            case 28: /* reduce AFactorialPostfixop */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list, false);
            }
            break;
            case 29: /* reduce AAtomFunc */
            {
                ArrayList<Object> list = new29();
                push(goTo(7), list, false);
            }
            break;
            case 30: /* reduce AFunc1Func */
            {
                ArrayList<Object> list = new30();
                push(goTo(7), list, false);
            }
            break;
            case 31: /* reduce AFunc2Func */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list, false);
            }
            break;
            case 32: /* reduce AVarAtom */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list, false);
            }
            break;
            case 33: /* reduce ANumberAtom */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, false);
            }
            break;
            case 34: /* reduce AFractionAtom */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce AInputAtom */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list, false);
            }
            break;
            case 36: /* reduce AExpressionAtom */
            {
                ArrayList<Object> list = new36();
                push(goTo(8), list, false);
            }
            break;
            case 37: /* reduce APairFractionLiteral */
            {
                ArrayList<Object> list = new37();
                push(goTo(9), list, false);
            }
            break;
            case 38: /* reduce ATripleFractionLiteral */
            {
                ArrayList<Object> list = new38();
                push(goTo(9), list, false);
            }
            break;
            case 39: /* reduce ASingleExpressionList */
            {
                ArrayList<Object> list = new39();
                push(goTo(10), list, false);
            }
            break;
            case 40: /* reduce ASequenceExpressionList */
            {
                ArrayList<Object> list = new40();
                push(goTo(10), list, false);
            }
            break;
            case 41: /* reduce ASingleAtomList */
            {
                ArrayList<Object> list = new41();
                push(goTo(11), list, false);
            }
            break;
            case 42: /* reduce ASequenceAtomList */
            {
                ArrayList<Object> list = new42();
                push(goTo(11), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAsingleprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStatement pstatementNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pprogramNode1 = new ASingleProgram(pstatementNode2, null);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAsingleprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStatement pstatementNode2;
        TStatementSeparator tstatementseparatorNode3;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        tstatementseparatorNode3 = (TStatementSeparator)nodeArrayList2.get(0);

        pprogramNode1 = new ASingleProgram(pstatementNode2, tstatementseparatorNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASequenceProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStatement pstatementNode2;
        TStatementSeparator tstatementseparatorNode3;
        PProgram pprogramNode4;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        tstatementseparatorNode3 = (TStatementSeparator)nodeArrayList2.get(0);
        pprogramNode4 = (PProgram)nodeArrayList3.get(0);

        pprogramNode1 = new ASequenceProgram(pstatementNode2, tstatementseparatorNode3, pprogramNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce APrinttextStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TQuotedText tquotedtextNode2;
        tquotedtextNode2 = (TQuotedText)nodeArrayList1.get(0);

        pstatementNode1 = new APrinttextStatement(tquotedtextNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAassignstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PExpression pexpressionNode3;
        TAssignArrow tassignarrowNode4;
        TVariableName tvariablenameNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);
        tassignarrowNode4 = (TAssignArrow)nodeArrayList2.get(0);
        tvariablenameNode5 = (TVariableName)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(null, pexpressionNode3, tassignarrowNode4, tvariablenameNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAassignstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TQuotedText tquotedtextNode2;
        PExpression pexpressionNode3;
        TAssignArrow tassignarrowNode4;
        TVariableName tvariablenameNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tquotedtextNode2 = (TQuotedText)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tassignarrowNode4 = (TAssignArrow)nodeArrayList3.get(0);
        tvariablenameNode5 = (TVariableName)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatement(tquotedtextNode2, pexpressionNode3, tassignarrowNode4, tvariablenameNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAassignstatement3Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PExpression pexpressionNode3;
        TAssignArrow tassignarrowNode4;
        TVariableName tvariablenameNode5;
        TPrintResult tprintresultNode6;
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);
        tassignarrowNode4 = (TAssignArrow)nodeArrayList2.get(0);
        tvariablenameNode5 = (TVariableName)nodeArrayList3.get(0);
        tprintresultNode6 = (TPrintResult)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatement(null, pexpressionNode3, tassignarrowNode4, tvariablenameNode5, tprintresultNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAassignstatement4Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TQuotedText tquotedtextNode2;
        PExpression pexpressionNode3;
        TAssignArrow tassignarrowNode4;
        TVariableName tvariablenameNode5;
        TPrintResult tprintresultNode6;
        tquotedtextNode2 = (TQuotedText)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tassignarrowNode4 = (TAssignArrow)nodeArrayList3.get(0);
        tvariablenameNode5 = (TVariableName)nodeArrayList4.get(0);
        tprintresultNode6 = (TPrintResult)nodeArrayList5.get(0);

        pstatementNode1 = new AAssignStatement(tquotedtextNode2, pexpressionNode3, tassignarrowNode4, tvariablenameNode5, tprintresultNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAprintvalstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pstatementNode1 = new APrintvalStatement(pexpressionNode2, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAprintvalstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TPrintResult tprintresultNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tprintresultNode3 = (TPrintResult)nodeArrayList2.get(0);

        pstatementNode1 = new APrintvalStatement(pexpressionNode2, tprintresultNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ALabelStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TLabel tlabelNode2;
        TNumberLiteral tnumberliteralNode3;
        tlabelNode2 = (TLabel)nodeArrayList1.get(0);
        tnumberliteralNode3 = (TNumberLiteral)nodeArrayList2.get(0);

        pstatementNode1 = new ALabelStatement(tlabelNode2, tnumberliteralNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AGotoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TGoto tgotoNode2;
        TNumberLiteral tnumberliteralNode3;
        tgotoNode2 = (TGoto)nodeArrayList1.get(0);
        tnumberliteralNode3 = (TNumberLiteral)nodeArrayList2.get(0);

        pstatementNode1 = new AGotoStatement(tgotoNode2, tnumberliteralNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASubNoargsStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSubNoargsName tsubnoargsnameNode2;
        tsubnoargsnameNode2 = (TSubNoargsName)nodeArrayList1.get(0);

        pstatementNode1 = new ASubNoargsStatement(tsubnoargsnameNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASubArgsStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSubArgsName tsubargsnameNode2;
        TSpace tspaceNode3;
        PAtomList patomlistNode4;
        tsubargsnameNode2 = (TSubArgsName)nodeArrayList1.get(0);
        tspaceNode3 = (TSpace)nodeArrayList2.get(0);
        patomlistNode4 = (PAtomList)nodeArrayList3.get(0);

        pstatementNode1 = new ASubArgsStatement(tsubargsnameNode2, tspaceNode3, patomlistNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TComparisonOp tcomparisonopNode3;
        PExpression pexpressionNode4;
        TThenArrow tthenarrowNode5;
        PStatement pstatementNode6;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tcomparisonopNode3 = (TComparisonOp)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tthenarrowNode5 = (TThenArrow)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pexpressionNode2, tcomparisonopNode3, pexpressionNode4, tthenarrowNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ACountJumpStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TCountJumpOp tcountjumpopNode2;
        TSpace tspaceNode3;
        TVariableName tvariablenameNode4;
        TStatementSeparator tstatementseparatorNode5;
        PStatement pstatementNode6;
        tcountjumpopNode2 = (TCountJumpOp)nodeArrayList1.get(0);
        tspaceNode3 = (TSpace)nodeArrayList2.get(0);
        tvariablenameNode4 = (TVariableName)nodeArrayList3.get(0);
        tstatementseparatorNode5 = (TStatementSeparator)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new ACountJumpStatement(tcountjumpopNode2, tspaceNode3, tvariablenameNode4, tstatementseparatorNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATermExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexpressionNode1 = new ATermExpression(ptermNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce APlusExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexpressionNode1 = new APlusExpression(pexpressionNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMinusExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexpressionNode1 = new AMinusExpression(pexpressionNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tmultNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TDiv tdivNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tdivNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASingleFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PMultgroup pmultgroupNode2;
        pmultgroupNode2 = (PMultgroup)nodeArrayList1.get(0);

        pfactorNode1 = new ASingleFactor(pmultgroupNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMultgroupFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        PMultgroup pmultgroupNode3;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        pmultgroupNode3 = (PMultgroup)nodeArrayList2.get(0);

        pfactorNode1 = new AMultgroupFactor(pfactorNode2, pmultgroupNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ANegateFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TMinus tminusNode2;
        PMultgroup pmultgroupNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pmultgroupNode3 = (PMultgroup)nodeArrayList2.get(0);

        pfactorNode1 = new ANegateFactor(tminusNode2, pmultgroupNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce APostfixopMultgroup */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultgroup pmultgroupNode1;
        {
            // Block
        PPostfixop ppostfixopNode2;
        ppostfixopNode2 = (PPostfixop)nodeArrayList1.get(0);

        pmultgroupNode1 = new APostfixopMultgroup(ppostfixopNode2);
        }
	nodeList.add(pmultgroupNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce APowerMultgroup */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultgroup pmultgroupNode1;
        {
            // Block
        PMultgroup pmultgroupNode2;
        TPow tpowNode3;
        PPostfixop ppostfixopNode4;
        pmultgroupNode2 = (PMultgroup)nodeArrayList1.get(0);
        tpowNode3 = (TPow)nodeArrayList2.get(0);
        ppostfixopNode4 = (PPostfixop)nodeArrayList3.get(0);

        pmultgroupNode1 = new APowerMultgroup(pmultgroupNode2, tpowNode3, ppostfixopNode4);
        }
	nodeList.add(pmultgroupNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFuncPostfixop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPostfixop ppostfixopNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        ppostfixopNode1 = new AFuncPostfixop(pfuncNode2);
        }
	nodeList.add(ppostfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AFactorialPostfixop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPostfixop ppostfixopNode1;
        {
            // Block
        PAtom patomNode2;
        TBang tbangNode3;
        patomNode2 = (PAtom)nodeArrayList1.get(0);
        tbangNode3 = (TBang)nodeArrayList2.get(0);

        ppostfixopNode1 = new AFactorialPostfixop(patomNode2, tbangNode3);
        }
	nodeList.add(ppostfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAtomFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        PAtom patomNode2;
        patomNode2 = (PAtom)nodeArrayList1.get(0);

        pfuncNode1 = new AAtomFunc(patomNode2);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AFunc1Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFunctionName tfunctionnameNode2;
        PAtom patomNode3;
        tfunctionnameNode2 = (TFunctionName)nodeArrayList1.get(0);
        patomNode3 = (PAtom)nodeArrayList2.get(0);

        pfuncNode1 = new AFunc1Func(tfunctionnameNode2, patomNode3);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AFunc2Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFunctionName tfunctionnameNode2;
        TLparen tlparenNode3;
        PExpression pexpressionNode4;
        TComma tcommaNode5;
        PExpressionList pexpressionlistNode6;
        TRparen trparenNode7;
        tfunctionnameNode2 = (TFunctionName)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pexpressionlistNode6 = (PExpressionList)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);

        pfuncNode1 = new AFunc2Func(tfunctionnameNode2, tlparenNode3, pexpressionNode4, tcommaNode5, pexpressionlistNode6, trparenNode7);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AVarAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TVariableName tvariablenameNode2;
        tvariablenameNode2 = (TVariableName)nodeArrayList1.get(0);

        patomNode1 = new AVarAtom(tvariablenameNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ANumberAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TNumberLiteral tnumberliteralNode2;
        tnumberliteralNode2 = (TNumberLiteral)nodeArrayList1.get(0);

        patomNode1 = new ANumberAtom(tnumberliteralNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AFractionAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        PFractionLiteral pfractionliteralNode2;
        pfractionliteralNode2 = (PFractionLiteral)nodeArrayList1.get(0);

        patomNode1 = new AFractionAtom(pfractionliteralNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AInputAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TInputPrompt tinputpromptNode2;
        tinputpromptNode2 = (TInputPrompt)nodeArrayList1.get(0);

        patomNode1 = new AInputAtom(tinputpromptNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExpressionAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TLparen tlparenNode2;
        PExpression pexpressionNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        patomNode1 = new AExpressionAtom(tlparenNode2, pexpressionNode3, trparenNode4);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce APairFractionLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFractionLiteral pfractionliteralNode1;
        {
            // Block
        TNumberLiteral tnumberliteralNode2;
        TFractionSep tfractionsepNode3;
        TNumberLiteral tnumberliteralNode4;
        tnumberliteralNode2 = (TNumberLiteral)nodeArrayList1.get(0);
        tfractionsepNode3 = (TFractionSep)nodeArrayList2.get(0);
        tnumberliteralNode4 = (TNumberLiteral)nodeArrayList3.get(0);

        pfractionliteralNode1 = new APairFractionLiteral(tnumberliteralNode2, tfractionsepNode3, tnumberliteralNode4);
        }
	nodeList.add(pfractionliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ATripleFractionLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFractionLiteral pfractionliteralNode1;
        {
            // Block
        TNumberLiteral tnumberliteralNode2;
        TFractionSep tfractionsepNode3;
        TNumberLiteral tnumberliteralNode4;
        TFractionSep tfractionsepNode5;
        TNumberLiteral tnumberliteralNode6;
        tnumberliteralNode2 = (TNumberLiteral)nodeArrayList1.get(0);
        tfractionsepNode3 = (TFractionSep)nodeArrayList2.get(0);
        tnumberliteralNode4 = (TNumberLiteral)nodeArrayList3.get(0);
        tfractionsepNode5 = (TFractionSep)nodeArrayList4.get(0);
        tnumberliteralNode6 = (TNumberLiteral)nodeArrayList5.get(0);

        pfractionliteralNode1 = new ATripleFractionLiteral(tnumberliteralNode2, tfractionsepNode3, tnumberliteralNode4, tfractionsepNode5, tnumberliteralNode6);
        }
	nodeList.add(pfractionliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASingleExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionList pexpressionlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pexpressionlistNode1 = new ASingleExpressionList(pexpressionNode2);
        }
	nodeList.add(pexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASequenceExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionList pexpressionlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TComma tcommaNode3;
        PExpressionList pexpressionlistNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexpressionlistNode4 = (PExpressionList)nodeArrayList3.get(0);

        pexpressionlistNode1 = new ASequenceExpressionList(pexpressionNode2, tcommaNode3, pexpressionlistNode4);
        }
	nodeList.add(pexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ASingleAtomList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtomList patomlistNode1;
        {
            // Block
        PAtom patomNode2;
        patomNode2 = (PAtom)nodeArrayList1.get(0);

        patomlistNode1 = new ASingleAtomList(patomNode2);
        }
	nodeList.add(patomlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASequenceAtomList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtomList patomlistNode1;
        {
            // Block
        PAtom patomNode2;
        TComma tcommaNode3;
        PAtomList patomlistNode4;
        patomNode2 = (PAtom)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        patomlistNode4 = (PAtomList)nodeArrayList3.get(0);

        patomlistNode1 = new ASequenceAtomList(patomNode2, tcommaNode3, patomlistNode4);
        }
	nodeList.add(patomlistNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {16, SHIFT, 7}, {17, SHIFT, 8}, {20, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {25, SHIFT, 12}, },
			{{-1, REDUCE, 3}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, {4, SHIFT, 24}, },
			{{-1, ERROR, 4}, {2, SHIFT, 2}, {3, SHIFT, 3}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, ERROR, 5}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, ERROR, 6}, {2, SHIFT, 2}, {3, SHIFT, 3}, {11, SHIFT, 27}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 8}, {24, SHIFT, 29}, },
			{{-1, ERROR, 9}, {3, SHIFT, 30}, },
			{{-1, ERROR, 10}, {3, SHIFT, 31}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 12}, {24, SHIFT, 32}, },
			{{-1, ERROR, 13}, {26, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 33}, },
			{{-1, REDUCE, 8}, {6, SHIFT, 34}, {7, SHIFT, 35}, {8, SHIFT, 36}, {13, SHIFT, 37}, {18, SHIFT, 38}, },
			{{-1, REDUCE, 16}, {9, SHIFT, 39}, {10, SHIFT, 40}, },
			{{-1, REDUCE, 19}, {2, SHIFT, 2}, {3, SHIFT, 3}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 22}, {19, SHIFT, 42}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 29}, {23, SHIFT, 43}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 23}, {7, SHIFT, 35}, {8, SHIFT, 36}, {13, SHIFT, 44}, },
			{{-1, ERROR, 24}, {3, SHIFT, 45}, },
			{{-1, REDUCE, 24}, {19, SHIFT, 42}, },
			{{-1, ERROR, 26}, {7, SHIFT, 35}, {8, SHIFT, 36}, {12, SHIFT, 46}, },
			{{-1, ERROR, 27}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 29}, {2, SHIFT, 2}, {3, SHIFT, 3}, {11, SHIFT, 5}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 32}, {2, SHIFT, 50}, },
			{{-1, REDUCE, 1}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {16, SHIFT, 7}, {17, SHIFT, 8}, {20, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {25, SHIFT, 12}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 35}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, ERROR, 36}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, ERROR, 37}, {2, SHIFT, 54}, },
			{{-1, ERROR, 38}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, ERROR, 39}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, ERROR, 40}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 23}, {19, SHIFT, 42}, },
			{{-1, ERROR, 42}, {2, SHIFT, 2}, {3, SHIFT, 3}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 44}, {2, SHIFT, 59}, },
			{{-1, REDUCE, 37}, {4, SHIFT, 60}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 47}, {5, SHIFT, 61}, {7, SHIFT, 35}, {8, SHIFT, 36}, {12, SHIFT, 46}, },
			{{-1, REDUCE, 41}, {5, SHIFT, 62}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 50}, {0, SHIFT, 63}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 17}, {9, SHIFT, 39}, {10, SHIFT, 40}, },
			{{-1, REDUCE, 18}, {9, SHIFT, 39}, {10, SHIFT, 40}, },
			{{-1, REDUCE, 4}, {6, SHIFT, 64}, },
			{{-1, ERROR, 55}, {7, SHIFT, 35}, {8, SHIFT, 36}, {14, SHIFT, 65}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 2}, {3, SHIFT, 3}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 21}, {2, SHIFT, 2}, {3, SHIFT, 3}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 5}, {6, SHIFT, 66}, },
			{{-1, ERROR, 60}, {3, SHIFT, 67}, },
			{{-1, ERROR, 61}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, ERROR, 62}, {2, SHIFT, 2}, {3, SHIFT, 3}, {11, SHIFT, 5}, {22, SHIFT, 11}, },
			{{-1, ERROR, 63}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {16, SHIFT, 7}, {17, SHIFT, 8}, {20, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {25, SHIFT, 12}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 65}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {16, SHIFT, 7}, {17, SHIFT, 8}, {20, SHIFT, 9}, {21, SHIFT, 10}, {22, SHIFT, 11}, {25, SHIFT, 12}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, {5, SHIFT, 73}, {7, SHIFT, 35}, {8, SHIFT, 36}, },
			{{-1, ERROR, 69}, {12, SHIFT, 74}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 73}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 4}, {11, SHIFT, 5}, {15, SHIFT, 6}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 40}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 13}, {33, 51}, },
			{{-1, 14}, {63, 71}, {65, 72}, },
			{{-1, 15}, {1, 23}, {5, 26}, {27, 47}, {38, 55}, {61, 68}, {73, 68}, },
			{{-1, 16}, {35, 52}, {36, 53}, },
			{{-1, 17}, {39, 56}, {40, 57}, },
			{{-1, 18}, {4, 25}, {17, 41}, {56, 41}, {57, 41}, },
			{{-1, 19}, {42, 58}, },
			{{-1, 20}, },
			{{-1, 21}, {6, 28}, {29, 48}, {62, 48}, },
			{{-1, 22}, },
			{{-1, 69}, {73, 75}, },
			{{-1, 49}, {62, 70}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: quoted text, variable name, number literal, '-', '(', function name, sub noargs name, sub args name, 'Lbl ', 'Goto ', '?', count jump op",
			"expecting: statement separator, variable name, number literal, '-', '(', function name, '?', EOF",
			"expecting: statement separator, variable name, number literal, ',', '#', '+', '-', '*', '/', '(', ')', '->', '=>', function name, comparison op, '^', '?', '!', EOF",
			"expecting: statement separator, variable name, number literal, '|', ',', '#', '+', '-', '*', '/', '(', ')', '->', '=>', function name, comparison op, '^', '?', '!', EOF",
			"expecting: variable name, number literal, '(', function name, '?'",
			"expecting: variable name, number literal, '-', '(', function name, '?'",
			"expecting: variable name, number literal, '(', '?'",
			"expecting: statement separator, EOF",
			"expecting: ' '",
			"expecting: number literal",
			"expecting: EOF",
			"expecting: statement separator, '#', '+', '-', '->', comparison op, EOF",
			"expecting: statement separator, ',', '#', '+', '-', '*', '/', ')', '->', '=>', comparison op, EOF",
			"expecting: statement separator, variable name, number literal, ',', '#', '+', '-', '*', '/', '(', ')', '->', '=>', function name, comparison op, '?', EOF",
			"expecting: statement separator, variable name, number literal, ',', '#', '+', '-', '*', '/', '(', ')', '->', '=>', function name, comparison op, '^', '?', EOF",
			"expecting: '+', '-', '->'",
			"expecting: '+', '-', ')'",
			"expecting: variable name",
			"expecting: quoted text, variable name, number literal, '-', '(', function name, sub noargs name, sub args name, 'Lbl ', 'Goto ', '?', count jump op, EOF",
			"expecting: ',', '+', '-', ')'",
			"expecting: statement separator, ',', EOF",
			"expecting: statement separator",
			"expecting: statement separator, '#', EOF",
			"expecting: '+', '-', '=>'",
			"expecting: ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 2, 8, 10, 7, 11, 12, 13, 14, 14, 14, 2, 2, 15, 9, 14, 16, 5, 14, 6, 7, 7, 17, 18, 7, 5, 5, 17, 5, 5, 5, 14, 4, 14, 17, 3, 2, 19, 20, 7, 21, 10, 12, 12, 22, 23, 13, 13, 14, 22, 9, 5, 6, 0, 7, 0, 7, 2, 19, 24, 7, 7, 7, 5, 14, 24, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
