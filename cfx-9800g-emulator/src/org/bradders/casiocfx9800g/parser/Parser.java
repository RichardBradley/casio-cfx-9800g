/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.bradders.casiocfx9800g.parser;

import org.bradders.casiocfx9800g.lexer.*;
import org.bradders.casiocfx9800g.node.*;
import org.bradders.casiocfx9800g.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ASingleProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASequenceProgram */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce APrinttextStatement */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAassignstatement1Statement */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAassignstatement2Statement */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAprintvalstatement1Statement */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AAprintvalstatement2Statement */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce ALabelStatement */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce AGotoStatement */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce ATermExpression */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce APlusExpression */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce AMinusExpression */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce ANegateExpression */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list, false);
            }
            break;
            case 14: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce ADivTerm */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce AMultadjTerm */
            {
                ArrayList<Object> list = new16();
                push(goTo(3), list, false);
            }
            break;
            case 17: /* reduce AAtomFactor */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list, false);
            }
            break;
            case 18: /* reduce APowerFactor */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list, false);
            }
            break;
            case 19: /* reduce AVarAtom */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce ANumberAtom */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list, false);
            }
            break;
            case 21: /* reduce AInputAtom */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce AExpressionAtom */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce AFuncAtom */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list, false);
            }
            break;
            case 24: /* reduce AFactorialAtom */
            {
                ArrayList<Object> list = new24();
                push(goTo(5), list, false);
            }
            break;
            case 25: /* reduce ASingleArgumentList */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list, false);
            }
            break;
            case 26: /* reduce ASequenceArgumentList */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ASingleProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStatement pstatementNode2;
        TStatementSeparator tstatementseparatorNode3;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        tstatementseparatorNode3 = (TStatementSeparator)nodeArrayList2.get(0);

        pprogramNode1 = new ASingleProgram(pstatementNode2, tstatementseparatorNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASequenceProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStatement pstatementNode2;
        TStatementSeparator tstatementseparatorNode3;
        PProgram pprogramNode4;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        tstatementseparatorNode3 = (TStatementSeparator)nodeArrayList2.get(0);
        pprogramNode4 = (PProgram)nodeArrayList3.get(0);

        pprogramNode1 = new ASequenceProgram(pstatementNode2, tstatementseparatorNode3, pprogramNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce APrinttextStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TQuotedText tquotedtextNode2;
        tquotedtextNode2 = (TQuotedText)nodeArrayList1.get(0);

        pstatementNode1 = new APrinttextStatement(tquotedtextNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAassignstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TAssignArrow tassignarrowNode3;
        TVariableName tvariablenameNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tassignarrowNode3 = (TAssignArrow)nodeArrayList2.get(0);
        tvariablenameNode4 = (TVariableName)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(pexpressionNode2, tassignarrowNode3, tvariablenameNode4, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAassignstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TAssignArrow tassignarrowNode3;
        TVariableName tvariablenameNode4;
        TPrintResult tprintresultNode5;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tassignarrowNode3 = (TAssignArrow)nodeArrayList2.get(0);
        tvariablenameNode4 = (TVariableName)nodeArrayList3.get(0);
        tprintresultNode5 = (TPrintResult)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatement(pexpressionNode2, tassignarrowNode3, tvariablenameNode4, tprintresultNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAprintvalstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pstatementNode1 = new APrintvalStatement(pexpressionNode2, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAprintvalstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TPrintResult tprintresultNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tprintresultNode3 = (TPrintResult)nodeArrayList2.get(0);

        pstatementNode1 = new APrintvalStatement(pexpressionNode2, tprintresultNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ALabelStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TLabel tlabelNode2;
        TNumberLiteral tnumberliteralNode3;
        tlabelNode2 = (TLabel)nodeArrayList1.get(0);
        tnumberliteralNode3 = (TNumberLiteral)nodeArrayList2.get(0);

        pstatementNode1 = new ALabelStatement(tlabelNode2, tnumberliteralNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AGotoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TGoto tgotoNode2;
        TNumberLiteral tnumberliteralNode3;
        tgotoNode2 = (TGoto)nodeArrayList1.get(0);
        tnumberliteralNode3 = (TNumberLiteral)nodeArrayList2.get(0);

        pstatementNode1 = new AGotoStatement(tgotoNode2, tnumberliteralNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ATermExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexpressionNode1 = new ATermExpression(ptermNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce APlusExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        TPlus tplusNode3;
        PExpression pexpressionNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new APlusExpression(ptermNode2, tplusNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMinusExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        TMinus tminusNode3;
        PExpression pexpressionNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMinusExpression(ptermNode2, tminusNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANegateExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TMinus tminusNode2;
        PExpression pexpressionNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANegateExpression(tminusNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMult tmultNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(pfactorNode2, tmultNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDiv tdivNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(pfactorNode2, tdivNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AMultadjTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        PTerm ptermNode3;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermNode1 = new AMultadjTerm(pfactorNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAtomFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PAtom patomNode2;
        patomNode2 = (PAtom)nodeArrayList1.get(0);

        pfactorNode1 = new AAtomFactor(patomNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce APowerFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PAtom patomNode2;
        TPow tpowNode3;
        PFactor pfactorNode4;
        patomNode2 = (PAtom)nodeArrayList1.get(0);
        tpowNode3 = (TPow)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pfactorNode1 = new APowerFactor(patomNode2, tpowNode3, pfactorNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AVarAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TVariableName tvariablenameNode2;
        tvariablenameNode2 = (TVariableName)nodeArrayList1.get(0);

        patomNode1 = new AVarAtom(tvariablenameNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ANumberAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TNumberLiteral tnumberliteralNode2;
        tnumberliteralNode2 = (TNumberLiteral)nodeArrayList1.get(0);

        patomNode1 = new ANumberAtom(tnumberliteralNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AInputAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TInputPrompt tinputpromptNode2;
        tinputpromptNode2 = (TInputPrompt)nodeArrayList1.get(0);

        patomNode1 = new AInputAtom(tinputpromptNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AExpressionAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TLparen tlparenNode2;
        PExpression pexpressionNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        patomNode1 = new AExpressionAtom(tlparenNode2, pexpressionNode3, trparenNode4);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFuncAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        TFunctionName tfunctionnameNode2;
        TLparen tlparenNode3;
        PArgumentList pargumentlistNode4;
        TRparen trparenNode5;
        tfunctionnameNode2 = (TFunctionName)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);

        patomNode1 = new AFuncAtom(tfunctionnameNode2, tlparenNode3, pargumentlistNode4, trparenNode5);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFactorialAtom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtom patomNode1;
        {
            // Block
        PAtom patomNode2;
        TBang tbangNode3;
        patomNode2 = (PAtom)nodeArrayList1.get(0);
        tbangNode3 = (TBang)nodeArrayList2.get(0);

        patomNode1 = new AFactorialAtom(patomNode2, tbangNode3);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ASingleArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pargumentlistNode1 = new ASingleArgumentList(pexpressionNode2);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASequenceArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TComma tcommaNode3;
        PArgumentList pargumentlistNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);

        pargumentlistNode1 = new ASequenceArgumentList(pexpressionNode2, tcommaNode3, pargumentlistNode4);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {15, SHIFT, 7}, {16, SHIFT, 8}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 4}, {2, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, ERROR, 5}, {2, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, ERROR, 6}, {10, SHIFT, 18}, },
			{{-1, ERROR, 7}, {3, SHIFT, 19}, },
			{{-1, ERROR, 8}, {3, SHIFT, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 10}, {19, ACCEPT, -1}, },
			{{-1, ERROR, 11}, {0, SHIFT, 21}, },
			{{-1, REDUCE, 5}, {5, SHIFT, 22}, {12, SHIFT, 23}, },
			{{-1, REDUCE, 9}, {6, SHIFT, 24}, {7, SHIFT, 25}, },
			{{-1, REDUCE, 13}, {2, SHIFT, 2}, {3, SHIFT, 3}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 17}, {14, SHIFT, 29}, {18, SHIFT, 30}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 17}, {11, SHIFT, 31}, },
			{{-1, ERROR, 18}, {2, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 0}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {15, SHIFT, 7}, {16, SHIFT, 8}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 23}, {2, SHIFT, 35}, },
			{{-1, ERROR, 24}, {2, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, ERROR, 25}, {2, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, ERROR, 26}, {2, SHIFT, 2}, {3, SHIFT, 3}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, ERROR, 27}, {2, SHIFT, 2}, {3, SHIFT, 3}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 29}, {2, SHIFT, 2}, {3, SHIFT, 3}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 25}, {4, SHIFT, 41}, },
			{{-1, ERROR, 33}, {11, SHIFT, 42}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, {5, SHIFT, 43}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 41}, {2, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, {21, 34}, },
			{{-1, 11}, },
			{{-1, 12}, {4, 16}, {5, 17}, {18, 32}, {24, 36}, {25, 37}, {41, 32}, },
			{{-1, 13}, {14, 28}, {26, 38}, {27, 39}, },
			{{-1, 14}, {29, 40}, },
			{{-1, 15}, },
			{{-1, 33}, {41, 44}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: quoted text, variable name, number literal, '-', '(', function name, 'Lbl ', 'Goto ', '?'",
			"expecting: statement separator",
			"expecting: statement separator, variable name, number literal, ',', '#', '+', '-', '*', '/', '(', ')', '->', function name, '^', '?', '!'",
			"expecting: variable name, number literal, '-', '(', function name, '?'",
			"expecting: '('",
			"expecting: number literal",
			"expecting: EOF",
			"expecting: statement separator, '#', '->'",
			"expecting: statement separator, ',', '#', '+', '-', ')', '->'",
			"expecting: statement separator, variable name, number literal, ',', '#', '+', '-', '*', '/', '(', ')', '->', function name, '?'",
			"expecting: statement separator, ',', '#', ')', '->'",
			"expecting: ')'",
			"expecting: quoted text, variable name, number literal, '-', '(', function name, 'Lbl ', 'Goto ', '?', EOF",
			"expecting: variable name",
			"expecting: variable name, number literal, '(', function name, '?'",
			"expecting: ',', ')'",
			"expecting: statement separator, '#'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 3, 4, 5, 5, 2, 6, 1, 7, 8, 9, 2, 10, 11, 3, 1, 1, 12, 1, 13, 3, 3, 14, 14, 8, 14, 2, 2, 15, 11, 6, 16, 10, 10, 8, 8, 9, 3, 2, 1, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
