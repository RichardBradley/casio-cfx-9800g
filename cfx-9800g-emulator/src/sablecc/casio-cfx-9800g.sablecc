Package org.bradders.casiocfx9800g;

Helpers
        digit = ['0' .. '9'];
        any_non_quote_char = [' ' + ['#' .. 'z']] +;
        colon = ':';
        newline = 13? 10;

Tokens
        statement_separator = newline | colon;
        quoted_text = '"' any_non_quote_char* '"';
        variable_name = ['A' .. 'Z'] | 'r' | 't';
        number_literal = digit+ |
                   digit* '.' digit+ |
                   digit+ 'e' '-'? digit+ |
                   digit* '.' digit+ 'e' '-'? digit+;
        fraction_sep = '|';
        comma = ',';
        print_result = '#';
        plus = '+';
        minus = '-';
        mult = '*';
        div = '/';
        lparen = '(';
        rparen = ')';
        assign_arrow = '->';
        then_arrow = '=>';
        /* Functions whose 'char' on the calc includes a space should be entered
         * here with a space in their name. (This differs from how we treat subs.) */
        function_name =
                  'e^' |
                  'sqrt' |
                  'sin ' |
                  'cos ' |
                  'tan ' |
                  'Frac ' |
                  'Int ' |
                  'Abs ';
        function_noargs_name =
                  'Ran#';
        sub_noargs_name =
                  'Mcl' |
                  'Line' |
                  'Orange Line' |
                  'Green Line';
        sub_args_name =
                  'Range' |
                  'Plot' |
                  'Orange Plot' |
                  'Green Plot';
        comparison_op =
                  '=' | '!=' | '>' | '>=' | '<' | '<=';
        pow = '^';
        label = 'Lbl ';
        goto = 'Goto ';
        input_prompt = '?';
        bang = '!';
        space = ' ';
        count_jump_op = 'Isz' | 'Dsz';
        prog = 'Prog';
        graph = 'Graph';

Productions
        program = 
                  {single} statement statement_separator? |
                  {sequence} statement statement_separator program;
        statement =
                  {printtext} quoted_text |
                  {assign} quoted_text? expression assign_arrow variable_name print_result? |
                  {printval} expression print_result? |
                  {label} label number_literal |
                  {goto} goto number_literal |
                  {sub_noargs} sub_noargs_name |
                  {sub_args} sub_args_name space atom_list |
                  {if} [left]:expression comparison_op [right]:expression then_arrow statement |
                  {count_jump} count_jump_op space variable_name statement_separator statement |
                  {sub} prog space quoted_text |
                  {graph} graph space variable_name comparison_op expression;
        expression =
                  {single} [single]:multdiv |
                  {plus} [left]:expression plus [right]:multdiv |
                  {minus} [left]:expression minus [right]:multdiv;
        multdiv =
                  {single} [single]:prefixop |
                  {mult} [left]:multdiv mult [right]:prefixop |
                  {div} [left]:multdiv div [right]:prefixop;
        prefixop =
                  {single} [single]:func |
                  {negate} minus func;
        func =
                  {single} [single]:multgroup |
                  {func1} function_name multgroup |
                  {func2} function_name lparen expression comma expression_list rparen |
                  {func_no_args} function_noargs_name;
        multgroup =
                  {single} [single]:frac |
                  {mult} [left]:multgroup [right]:frac;
        frac =
                  {single} [single]:P.pow |
                  {pair} [numerator]:P.pow fraction_sep [denominator]:P.pow |
                  {triple} [units]:P.pow [first_sep]:fraction_sep [numerator]:P.pow [second_sep]:fraction_sep [denominator]:P.pow;
        pow =
                  {single} [single]:postfixop |
                  {power} [left]:P.pow [op]:T.pow [right]:postfixop;
        postfixop =
                  {single} [single]:atom |
                  {factorial} postfixop bang;
        atom =
                  {var} variable_name |
                  {number} number_literal |
                  {input} input_prompt |
                  {expression} lparen expression rparen;
        expression_list =
                  {single} expression |
                  {sequence} expression comma expression_list;
        atom_list =
                  {single} atom |
                  {sequence} atom comma atom_list;
