Package org.bradders.casiocfx9800g;

Helpers
        digit = ['0' .. '9'];
        any_non_quote_char = [' ' + ['#' .. 'z']] +;
	colon = ':';
        newline = 13? 10;

Tokens
	statement_separator = newline | colon;
        quoted_text = '"' any_non_quote_char* '"';
        variable_name = ['A' .. 'Z'] | 'r' | 't';
        number_literal = digit+ | digit* '.' digit+;
	comma = ',';
        print_result = '#';
        plus = '+';
        minus = '-';
        mult = '*';
        div = '/';
	lparen = '(';
	rparen = ')';
	assign_arrow = '->';
	then_arrow = '=>';
	function_name =
		  'e^' |
		  'sqrt' |
		  'Frac ' |
		  'Abs ';
        sub_noargs_name =
		  'Line' |
		  'Orange Line' |
		  'Green Line';
        sub_args_name =
		  'Range' |
		  'Plot' |
		  'Orange Plot' |
		  'Green Plot';
	comparison_op =
		  '=' | '!=' | '>' | '>=' | '<' | '<=';
	pow = '^';
	label = 'Lbl ';
	goto = 'Goto ';
	input_prompt = '?';
	bang = '!';
	space = ' ';

Productions
        program = 
		  {single} statement statement_separator |
		  {sequence} statement statement_separator program;
        statement =
                  {printtext} quoted_text |
                  {assign} expression assign_arrow variable_name print_result? |
                  {printval} expression print_result? |
                  {label} label number_literal |
                  {goto} goto number_literal |
		  {sub_noargs} sub_noargs_name |
		  {sub_args} sub_args_name space atom_list |
		  {if} [left]:expression comparison_op [right]:expression then_arrow statement;
        expression =
                  {term} term |
                  {plus} term plus expression |
		  {minus} term minus expression |
		  {negate} minus expression;
	term =
		  {factor} factor |
		  {mult} term mult factor |
		  {div} term div factor;
        factor =
	          {single} multgroup |
		  {multgroup} factor multgroup;
        multgroup =
		  {postfixop} postfixop |
		  {power} multgroup pow postfixop;
	postfixop =
		  {func} func |
		  {factorial} atom bang;
	func =
		  {atom} atom |
                  {func1} function_name atom |
                  {func2} function_name lparen expression comma expression_list rparen;
 	atom =
	          {var} variable_name |
	       	  {number} number_literal |
		  {input} input_prompt |
  	       	  {expression} lparen expression rparen;
	expression_list =
		  {single} expression |
		  {sequence} expression comma expression_list;
	atom_list =
		  {single} atom |
		  {sequence} atom comma atom_list;
